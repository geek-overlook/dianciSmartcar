C251 COMPILER V5.60.0,  zf_uart                                                            15/07/24  23:32:33  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_uart
OBJECT MODULE PLACED IN .\Out_File\zf_uart.obj
COMPILER INVOKED BY: D:\c51-keil\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_uart.c XSMALL WARNINGLEVEL(3) O
                    -PTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_per
                    -ipheral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components;.\Out_File) DEBUG PRINT(.\Out_File\zf_uart.l
                    -st) TABS(2) OBJECT(.\Out_File\zf_uart.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          uart
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32F12K
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "zf_uart.h"
   21          #include "board.h"
   22             
   23          
   24          
   25          uint8 busy[5] = {0};         //接收忙标志位
   26          
   27          
   28          //-------------------------------------------------------------------------------------------------------
             -------------
   29          //  @brief      串口初始化
   30          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
   31          //  @param      uart_rx_pin     串口接收引脚
   32          //  @param      uart_tx_pin     串口发送引脚
   33          //  @param      baud          串口波特率
   34          //  @param      tim_n         使用tim_n作为串口波特率发生器(TIM1-TIM4)
   35          //  @return     NULL            
   36          //  Sample usage:               uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);        //初
             -始化串口1 波特率115200 发送引脚使用P31 接收引脚使用P30 ,使用定时器2作为波特率发生器
   37          //  @note                       串口1使用 定时器1或者定时器2 作为波特率发生器。
   38          //                串口2使用 定时器2        作为波特率发生器。
   39          //                串口3使用 定时器3或者定时器2 作为波特率发生器。
   40          //                串口4使用 定时器4或者定时器2 作为波特率发生器。
   41          //                              STC32G仅有 定时器0-定时器4，这5个定时器。
   42          //                编码器采集数据也需要定时器作为外部计数。
   43          //                如果不同的串口，使用同一个定时器，串口的波特率以最后一个初始化为准
   44          //-------------------------------------------------------------------------------------------------------
             -------------
   45          void uart_init(UARTN_enum uart_n, UARTPIN_enum uart_rx_pin, UARTPIN_enum uart_tx_pin, uint32 baud, TIMN_e
             -num tim_n)
   46          {
   47   1          uint16 brt;
   48   1      
   49   1        brt = (uint16)(65536 - (sys_clk/baud/4));
   50   1      
C251 COMPILER V5.60.0,  zf_uart                                                            15/07/24  23:32:33  PAGE 2   

   51   1      
   52   1        switch(uart_n)
   53   1        {
   54   2          case UART_1:
   55   2          {
   56   3            if(TIM_1 == tim_n)
   57   3            {
   58   4              SCON |= 0x50;
   59   4              TMOD |= 0x00;
   60   4              TL1 = brt;
   61   4              TH1 = brt >> 8;
   62   4              AUXR |= 0x40;
   63   4              TR1 = 1;
   64   4              busy[1] = 0;
   65   4            }
   66   3            else if(TIM_2 == tim_n)
   67   3            {
   68   4              SCON |= 0x50;
   69   4              T2L = brt;
   70   4              T2H = brt >> 8;
   71   4              AUXR |= 0x15;
   72   4            }
   73   3            P_SW1 &= ~(0x03<<6);
   74   3            if((UART1_RX_P30 == uart_rx_pin) && (UART1_TX_P31 == uart_tx_pin))
   75   3            {
   76   4              P_SW1 |= 0x00;
   77   4            }
   78   3            else if((UART1_RX_P36 == uart_rx_pin) && (UART1_TX_P37 == uart_tx_pin))
   79   3            {
   80   4              P_SW1 |= 0x40;
   81   4            }
   82   3            else if((UART1_RX_P16 == uart_rx_pin) && (UART1_TX_P17 == uart_tx_pin))
   83   3            {
   84   4              P_SW1 |= 0x80;
   85   4            }
   86   3            else if((UART1_RX_P43 == uart_rx_pin) && (UART1_TX_P44 == uart_tx_pin))
   87   3            {
   88   4              P_SW1 |= 0xc0;
   89   4            }
   90   3            busy[1] = 0;
   91   3            ES = 1;
   92   3            break;
   93   3          }
   94   2          
   95   2          case UART_2:
   96   2          {
   97   3            if(TIM_2 == tim_n)
   98   3            {
   99   4              S2CON |= 0x50;
  100   4              T2L = brt;
  101   4              T2H = brt >> 8;
  102   4              AUXR |= 0x14;
  103   4            }
  104   3            
  105   3            P_SW2 &= ~(0x01<<0);
  106   3            if((UART2_RX_P10 == uart_rx_pin) && (UART2_TX_P11 == uart_tx_pin))
  107   3            {
  108   4              P_SW2 |= 0x00;
  109   4            }
  110   3            else if((UART2_RX_P46 == uart_rx_pin) && (UART2_TX_P47 == uart_tx_pin))
  111   3            {
  112   4              P_SW2 |= 0x01;
  113   4            }
  114   3            
  115   3            IE2 |= 0x01 << 0; //允许串行口2中断
  116   3            busy[2] = 0;
C251 COMPILER V5.60.0,  zf_uart                                                            15/07/24  23:32:33  PAGE 3   

  117   3            break;
  118   3          }
  119   2          
  120   2          case UART_3:
  121   2          {
  122   3            if(TIM_2 == tim_n)
  123   3            {
  124   4              S3CON |= 0x10;
  125   4              T2L = brt;
  126   4              T2H = brt >> 8;
  127   4              AUXR |= 0x14;
  128   4            }
  129   3            else if(TIM_3 == tim_n)
  130   3            {
  131   4              S3CON |= 0x50;
  132   4              T3L = brt;
  133   4              T3H = brt >> 8;
  134   4              T4T3M |= 0x0a;
  135   4            }
  136   3            
  137   3            P_SW2 &= ~(0x01<<1);
  138   3            if((UART3_RX_P00 == uart_rx_pin) && (UART3_TX_P01 == uart_tx_pin))
  139   3            {
  140   4              P_SW2 |= 0x00;
  141   4            }
  142   3            else if((UART3_RX_P50 == uart_rx_pin) && (UART3_TX_P51 == uart_tx_pin))
  143   3            {
  144   4              P_SW2 |= 0x02;
  145   4            }
  146   3            
  147   3            IE2 |= 0x01<<3; //允许串行口3中断
  148   3            busy[3] = 0;
  149   3            break;
  150   3          }
  151   2          
  152   2          case UART_4:
  153   2          {
  154   3            if(TIM_2 == tim_n)
  155   3            {
  156   4              S4CON |= 0x10;
  157   4              T2L = brt;
  158   4              T2H = brt >> 8;
  159   4              AUXR = 0x15;
  160   4            }
  161   3            else if(TIM_4 == tim_n)
  162   3            {
  163   4              S4CON |= 0x50;
  164   4              T4L = brt;
  165   4              T4H = brt >> 8;
  166   4              T4T3M |= 0xa0;
  167   4            }
  168   3      
  169   3            P_SW2 &= ~(0x01<<2);
  170   3            if((UART4_RX_P02 == uart_rx_pin) && (UART4_TX_P03 == uart_tx_pin))
  171   3            {
  172   4              P_SW2 |= 0x00;
  173   4            }
  174   3            else if((UART4_RX_P52 == uart_rx_pin) && (UART4_TX_P53 == uart_tx_pin))
  175   3            {
  176   4              P5M0 = 0x00;
  177   4              P5M1 = 0x01<<2;//P5.2 需要设置为高阻
  178   4              P_SW2 |= 0x04;
  179   4            }
  180   3            IE2 |= 0x01<<4; //允许串行口4中断
  181   3            busy[4] = 0;
  182   3            break;
C251 COMPILER V5.60.0,  zf_uart                                                            15/07/24  23:32:33  PAGE 4   

  183   3          }
  184   2          
  185   2        }
  186   1      
  187   1      }
  188          
  189          //-------------------------------------------------------------------------------------------------------
             -------------
  190          //  @brief      串口字节输出
  191          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  192          //  @param      dat             需要发送的字节
  193          //  @return     void        
  194          //  Sample usage:               uart_putchar(UART_1,0xA5);       // 串口1发送0xA5
  195          //-------------------------------------------------------------------------------------------------------
             -------------
  196          void uart_putchar(UARTN_enum uart_n,uint8 dat)
  197          {
  198   1        switch(uart_n)
  199   1        {
  200   2          case UART_1:
  201   2            while (busy[1]);
  202   2            busy[1] = 1;
  203   2            SBUF = dat;
  204   2              break;
  205   2          case UART_2:
  206   2            while (busy[2]);
  207   2            busy[2] = 1;
  208   2            S2BUF = dat;
  209   2              break;
  210   2          case UART_3:
  211   2            while (busy[3]);
  212   2            busy[3] = 1;
  213   2            S3BUF = dat;
  214   2              break;
  215   2          case UART_4:
  216   2            while (busy[4]);
  217   2            busy[4] = 1;
  218   2            S4BUF = dat;
  219   2              break;
  220   2        }
  221   1      }
  222          
  223          
  224          //-------------------------------------------------------------------------------------------------------
             -------------
  225          //  @brief      串口发送数组
  226          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  227          //  @param      *buff           要发送的数组地址
  228          //  @param      len             发送长度
  229          //  @return     void
  230          //  Sample usage:               uart_putbuff(UART_1,&a[0],5);
  231          //-------------------------------------------------------------------------------------------------------
             -------------
  232          void uart_putbuff(UARTN_enum uart_n,uint8 *p,uint32 len)
  233          {
  234   1          while(len--)
  235   1              uart_putchar(uart_n,*p++);
  236   1      }
  237          
  238          
  239          //-------------------------------------------------------------------------------------------------------
             -------------
  240          //  @brief      串口发送字符串
  241          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  242          //  @param      *str            要发送的字符串地址
  243          //  @return     void
C251 COMPILER V5.60.0,  zf_uart                                                            15/07/24  23:32:33  PAGE 5   

  244          //  Sample usage:               uart_putstr(UART_1,"i lvoe you"); 
  245          //-------------------------------------------------------------------------------------------------------
             -------------
  246          void uart_putstr(UARTN_enum uart_n,uint8 *str)
  247          {
  248   1          while(*str)
  249   1          {
  250   2              uart_putchar(uart_n, *str++);
  251   2          }
  252   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       902     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        38     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         9     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
