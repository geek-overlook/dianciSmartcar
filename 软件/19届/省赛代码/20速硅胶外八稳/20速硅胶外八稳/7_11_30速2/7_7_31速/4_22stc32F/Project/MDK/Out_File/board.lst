C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE board
OBJECT MODULE PLACED IN .\Out_File\board.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\libraries\board.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SP
                    -EED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\C
                    -ODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components;.\Out_File) DEBUG PRINT(.\Out_File\board.lst) TABS(2) OB
                    -JECT(.\Out_File\board.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          board
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32F12K
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          #include "board.h"
   22          #include "zf_uart.h"
   23          #include "zf_tim.h"
   24          #include "zf_delay.h"
   25          
   26          //内核频率
   27          int32 sys_clk = 0;
   28          
   29          //-------------------------------------------------------------------------------------------------------
             -------------
   30          //  @brief      STC32G设置系统频率
   31          //  @param      NULL            空值
   32          //  @return     void          系统频率
   33          //  Sample usage:
   34          //-------------------------------------------------------------------------------------------------------
             -------------
   35          uint32 set_clk(uint32 clock)
   36          {
   37   1        uint32 temp_sys_clk = 0;
   38   1        
   39   1        
   40   1          switch(clock)
   41   1          {
   42   2          case SYSTEM_CLOCK_500K:
   43   2              //选择500KHz
   44   2              CLKDIV = 0x04;
   45   2              IRTRIM = T24M_ADDR;
   46   2              VRTRIM = VRT24M_ADDR;
   47   2              IRCBAND = IRCBAND_24M;
   48   2              WTST = 0;       //设置程序读取等待控制寄存器
   49   2          _nop_();
   50   2              _nop_();
   51   2              _nop_();
   52   2              _nop_();
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 2   

   53   2              CLKDIV = 48;
   54   2          temp_sys_clk = clock;
   55   2              break;
   56   2      
   57   2          case SYSTEM_CLOCK_3M:
   58   2              //选择3MHz
   59   2              CLKDIV = 0x04;
   60   2              IRTRIM = T24M_ADDR;
   61   2              VRTRIM = VRT24M_ADDR;
   62   2              IRCBAND = IRCBAND_24M;
   63   2              WTST = 0;       //设置程序读取等待控制寄存器
   64   2          _nop_();
   65   2          _nop_();
   66   2          _nop_();
   67   2          _nop_();
   68   2              CLKDIV = 8;
   69   2          temp_sys_clk = clock;
   70   2              break;
   71   2      
   72   2          case SYSTEM_CLOCK_55_296M:
   73   2              //选择5.5296MHz
   74   2              CLKDIV = 0x04;
   75   2              IRTRIM = T22M_ADDR;
   76   2              VRTRIM = VRT24M_ADDR;
   77   2              IRCBAND = IRCBAND_24M;
   78   2              WTST = 0;       //设置程序读取等待控制寄存器
   79   2          _nop_();
   80   2          _nop_();
   81   2          _nop_();
   82   2          _nop_();
   83   2              CLKDIV = 4;
   84   2          temp_sys_clk = clock;
   85   2              break;
   86   2      
   87   2          case SYSTEM_CLOCK_6M:
   88   2              //选择6MHz
   89   2              CLKDIV = 0x04;
   90   2              IRTRIM = T24M_ADDR;
   91   2              VRTRIM = VRT24M_ADDR;
   92   2              IRCBAND = IRCBAND_24M;
   93   2          _nop_();
   94   2          _nop_();
   95   2          _nop_();
   96   2          _nop_();
   97   2              WTST = 0;       //设置程序读取等待控制寄存器
   98   2              CLKDIV = 4;
   99   2          temp_sys_clk = clock;
  100   2              break;
  101   2      
  102   2          case SYSTEM_CLOCK_11_0592M:
  103   2              //选择11.0592MHz
  104   2              CLKDIV = 0x04;
  105   2              IRTRIM = T22M_ADDR;
  106   2              VRTRIM = VRT24M_ADDR;
  107   2              IRCBAND = IRCBAND_24M;
  108   2              WTST = 0;       //设置程序读取等待控制寄存器
  109   2          _nop_();
  110   2          _nop_();
  111   2          _nop_();
  112   2          _nop_();
  113   2              CLKDIV = 2;
  114   2          temp_sys_clk = clock;
  115   2              break;
  116   2      
  117   2          case SYSTEM_CLOCK_12M:
  118   2              //选择12MHz
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 3   

  119   2              CLKDIV = 0x04;
  120   2              IRTRIM = T24M_ADDR;
  121   2              VRTRIM = VRT24M_ADDR;
  122   2              IRCBAND = IRCBAND_24M;
  123   2              WTST = 0;       //设置程序读取等待控制寄存器
  124   2          _nop_();
  125   2          _nop_();
  126   2          _nop_();
  127   2          _nop_();
  128   2              CLKDIV = 2;
  129   2          temp_sys_clk = clock;
  130   2              break;
  131   2      
  132   2          case SYSTEM_CLOCK_22_1184M:
  133   2              //选择22.1184MHz
  134   2              CLKDIV = 0x04;
  135   2              IRTRIM = T22M_ADDR;
  136   2              VRTRIM = VRT24M_ADDR;
  137   2              IRCBAND = IRCBAND_24M;
  138   2              WTST = 0;       //设置程序读取等待控制寄存器
  139   2          _nop_();
  140   2          _nop_();
  141   2          _nop_();
  142   2          _nop_();
  143   2              CLKDIV = 1;
  144   2          temp_sys_clk = clock;
  145   2              break;
  146   2      
  147   2          case SYSTEM_CLOCK_24M:
  148   2              //选择24MHz
  149   2              CLKDIV = 0x04;
  150   2              IRTRIM = T24M_ADDR;
  151   2              VRTRIM = VRT24M_ADDR;
  152   2              IRCBAND = IRCBAND_24M;
  153   2              WTST = 0;       //设置程序读取等待控制寄存器
  154   2          _nop_();
  155   2          _nop_();
  156   2          _nop_();
  157   2          _nop_();
  158   2              CLKDIV = 1;
  159   2          temp_sys_clk = clock;
  160   2              break;
  161   2      
  162   2          case SYSTEM_CLOCK_30M:
  163   2              //选择30MHz
  164   2              CLKDIV = 0x04;
  165   2              IRTRIM = T60M_ADDR;
  166   2              VRTRIM = VRT44M_ADDR;
  167   2              IRCBAND = IRCBAND_44M;
  168   2              WTST = 0;       //设置程序读取等待控制寄存器
  169   2          _nop_();
  170   2          _nop_();
  171   2          _nop_();
  172   2          _nop_();
  173   2              CLKDIV = 2;
  174   2          temp_sys_clk = clock;
  175   2              break;
  176   2      
  177   2          case SYSTEM_CLOCK_32M:
  178   2              //选择32MHz
  179   2              CLKDIV = 0x04;
  180   2              IRTRIM = T64M_ADDR;
  181   2              VRTRIM = VRT44M_ADDR;
  182   2              IRCBAND = IRCBAND_44M;
  183   2              WTST = 0;       //设置程序读取等待控制寄存器
  184   2          _nop_();
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 4   

  185   2          _nop_();
  186   2          _nop_();
  187   2          _nop_();
  188   2              CLKDIV = 2;
  189   2          temp_sys_clk = clock;
  190   2              break;
  191   2      
  192   2          case SYSTEM_CLOCK_40M:
  193   2              //选择40MHz
  194   2              CLKDIV = 0x04;
  195   2              IRTRIM = T40M_ADDR;
  196   2              VRTRIM = VRT44M_ADDR;
  197   2              IRCBAND = IRCBAND_44M;
  198   2              WTST = 1;       //设置程序读取等待控制寄存器
  199   2          _nop_();
  200   2          _nop_();
  201   2          _nop_();
  202   2          _nop_();
  203   2              CLKDIV = 1;
  204   2          temp_sys_clk = clock;
  205   2              break;
  206   2      
  207   2          case SYSTEM_CLOCK_45_1584M:
  208   2              //选择45.1584MHz
  209   2              CLKDIV = 0x04;
  210   2              IRTRIM = T45M_ADDR;
  211   2              VRTRIM = VRT44M_ADDR;
  212   2              IRCBAND = IRCBAND_44M;
  213   2              WTST = 1;       //设置程序读取等待控制寄存器
  214   2          _nop_();
  215   2          _nop_();
  216   2          _nop_();
  217   2          _nop_();
  218   2              CLKDIV = 1;
  219   2          temp_sys_clk = clock;
  220   2              break;
  221   2      
  222   2          case SYSTEM_CLOCK_48M:
  223   2              //选择48MHz
  224   2              CLKDIV = 0x04;
  225   2              IRTRIM = T48M_ADDR;
  226   2              VRTRIM = VRT44M_ADDR;
  227   2              IRCBAND = IRCBAND_44M;
  228   2              WTST = 1;       //设置程序读取等待控制寄存器
  229   2          _nop_();
  230   2          _nop_();
  231   2          _nop_();
  232   2          _nop_();
  233   2              CLKDIV = 1;
  234   2          temp_sys_clk = clock;
  235   2              break;
  236   2      
  237   2          case SYSTEM_CLOCK_50M:
  238   2              //选择50.8032MHz
  239   2              CLKDIV = 0x04;
  240   2              IRTRIM = T50M_ADDR;
  241   2              VRTRIM = VRT44M_ADDR;
  242   2              IRCBAND = IRCBAND_44M;
  243   2              WTST = 1;       //设置程序读取等待控制寄存器
  244   2          _nop_();
  245   2          _nop_();
  246   2          _nop_();
  247   2          _nop_();
  248   2              CLKDIV = 1;
  249   2          temp_sys_clk = clock;
  250   2              break;
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 5   

  251   2      
  252   2          case SYSTEM_CLOCK_52M:
  253   2              //选择52MHz
  254   2              CLKDIV = 0x04;
  255   2              IRTRIM = T52M_ADDR;
  256   2              VRTRIM = VRT44M_ADDR;
  257   2              IRCBAND = IRCBAND_44M;
  258   2              WTST = 1;       //设置程序读取等待控制寄存器
  259   2          _nop_();
  260   2          _nop_();
  261   2          _nop_();
  262   2          _nop_();
  263   2              CLKDIV = 1;
  264   2          temp_sys_clk = clock;
  265   2              break;
  266   2      
  267   2          case SYSTEM_CLOCK_56M:
  268   2              //选择56MHz
  269   2              CLKDIV = 0x04;
  270   2              IRTRIM = T56M_ADDR;
  271   2              VRTRIM = VRT44M_ADDR;
  272   2              IRCBAND = IRCBAND_44M;
  273   2              WTST = 1;       //设置程序读取等待控制寄存器
  274   2          _nop_();
  275   2          _nop_();
  276   2          _nop_();
  277   2          _nop_();
  278   2              CLKDIV = 1;
  279   2          temp_sys_clk = clock;
  280   2              break;
  281   2      
  282   2          case SYSTEM_CLOCK_60M:
  283   2              //选择60MHz
  284   2              CLKDIV = 0x04;
  285   2              IRTRIM = T60M_ADDR;
  286   2              VRTRIM = VRT44M_ADDR;
  287   2              IRCBAND = IRCBAND_44M;
  288   2              WTST = 1;       //设置程序读取等待控制寄存器
  289   2          _nop_();
  290   2          _nop_();
  291   2          _nop_();
  292   2          _nop_();
  293   2              CLKDIV = 1;
  294   2          temp_sys_clk = clock;
  295   2              break;
  296   2      
  297   2      //    case SYSTEM_CLOCK_64M:
  298   2      //        //选择64MHz
  299   2      //        CLKDIV = 0x04;
  300   2      //        IRTRIM = T64M_ADDR;
  301   2      //        VRTRIM = VRT44M_ADDR;
  302   2      //        IRCBAND = IRCBAND_44M;
  303   2      //        WTST = 2;       //设置程序读取等待控制寄存器
  304   2      //        CLKDIV = 1;
  305   2      //        break;
  306   2      
  307   2          default:
  308   2              //选择56MHz
  309   2              CLKDIV = 0x04;
  310   2              IRTRIM = T56M_ADDR;
  311   2              VRTRIM = VRT44M_ADDR;
  312   2              IRCBAND = IRCBAND_44M;
  313   2              WTST = 1;       //设置程序读取等待控制寄存器
  314   2          _nop_();
  315   2          _nop_();
  316   2          _nop_();
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 6   

  317   2          _nop_();
  318   2              CLKDIV = 1;
  319   2          temp_sys_clk = SYSTEM_CLOCK_56M;
  320   2              break;
  321   2        }
  322   1        
  323   1        return temp_sys_clk;
  324   1      }
  325          
  326          
  327          
  328          
  329          
  330          
  331          #if (1 == PRINTF_ENABLE)      //初始化调试串口
  332          //重定义printf 数字 只能输出uint16
  333              char putchar(char c)
  334              {
  335   1              uart_putchar(UART_1, c);//把自己实现的串口打印一字节数据的函数替换到这里
  336   1      
  337   1              return c;
  338   1          }
  339          #endif
  340          
  341          void DisableGlobalIRQ(void)
  342          {
  343   1        EA = 0;
  344   1      }
  345          
  346          
  347          void EnableGlobalIRQ(void)
  348          {
  349   1        EA = 1;
  350   1      }
  351          
  352          void enalbe_icache(void)
  353          {
  354   1        EA = 0;
  355   1        _nop_();
  356   1        _nop_();
  357   1        TA = 0xaa;    //写入触发命令序列1
  358   1                //此处不能有其他任何指令
  359   1        TA = 0x55;    //写入触发命令序列2
  360   1                //此处不能有其他任何指令
  361   1        ICHECR = 0x01;  //写保护暂时关闭，可以修改ICHECR 中的EN 位
  362   1                //EN 位再次进入写保护状态
  363   1        _nop_();
  364   1        _nop_();
  365   1        EA = 1;
  366   1      }
  367          
  368          void disalbe_icache(void)
  369          {
  370   1        EA = 0;
  371   1        _nop_();
  372   1        _nop_();
  373   1        TA = 0xaa;    //写入触发命令序列1
  374   1                //此处不能有其他任何指令
  375   1        TA = 0x55;    //写入触发命令序列2
  376   1                //此处不能有其他任何指令
  377   1        ICHECR = 0x00;  //写保护暂时关闭，可以修改ICHECR 中的EN 位
  378   1                //EN 位再次进入写保护状态
  379   1        _nop_();
  380   1        _nop_();
  381   1        EA = 1;
  382   1      }
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 7   

  383          
  384          
  385          void ICacheOn() //打开ICACHE 功能
  386          {
  387   1        _nop_();
  388   1        _nop_();
  389   1        TA = 0xaa; //写入触发命令序列1
  390   1        //此处不能有其他任何指令
  391   1        TA = 0x55; //写入触发命令序列2
  392   1        //此处不能有其他任何指令
  393   1        ICHECR = 0x01; //写保护暂时关闭，可以修改ICHECR 中的EN 位
  394   1        //EN 位再次进入写保护状态
  395   1        _nop_();
  396   1        _nop_();
  397   1      }
  398          
  399          void clock_init(uint32 clock)
  400          {
  401   1        P_SW2 = 0x80; // 开启特殊地址访问
  402   1        
  403   1        #if (1 == EXTERNAL_CRYSTA_ENABLE)
                 {
                   sys_clk = clock;
                 }
                 #else
  408   1        {
  409   2          sys_clk = set_clk(clock);
  410   2        }
  411   1        #endif
  412   1      
  413   1      }
  414          
  415          
  416          void board_init(void)
  417          {
  418   1      
  419   1        SET_P54_RESRT;      // 使P54为复位引脚
  420   1      
  421   1        
  422   1        P0M0 = 0x00;
  423   1        P0M1 = 0x00;
  424   1        P1M0 = 0x00;
  425   1        P1M1 = 0x00;
  426   1        P2M0 = 0x00;
  427   1        P2M1 = 0x00;
  428   1        P3M0 = 0x00;
  429   1        P3M1 = 0x00;
  430   1        P4M0 = 0x00;
  431   1        P4M1 = 0x00;
  432   1        P5M0 = 0x00;
  433   1        P5M1 = 0x00;   
  434   1      //  P6M0 = 0x00;
  435   1      //  P6M1 = 0x00;
  436   1      //  P7M0 = 0x00;
  437   1      //  P7M1 = 0x00;
  438   1        
  439   1      
  440   1      #if (1 == EXTERNAL_CRYSTA_ENABLE)
               {
               
                 XOSCCR = 0xc0;      //启动外部晶振
                 while(!(XOSCCR & 1));   //等待时钟稳定
               
                 CLKDIV = 0x00;      //时钟不分频
                 CLKSEL = 0x01;      //选择外部晶振
               }
C251 COMPILER V5.60.0,  board                                                              19/12/24  21:12:22  PAGE 8   

               
               #endif
  451   1      
  452   1        delay_init();     //延时函数初始化
  453   1      
  454   1        if(sys_clk > SYSTEM_CLOCK_32M)
  455   1        {
  456   2          //STC32F 系列单片机内部硬件逻辑及外设可运行在60MHz 的主频下，但内部的程序存储器（ROM）
  457   2          //相对较慢，时钟只能在33M 左右，为解决这个时钟不一致的问题，STC32F 系列增加了ICACHE 技术，
  458   2          //即程序存储器高速缓存技术。
  459   2          ICacheOn();
  460   2        }
  461   1        
  462   1      
  463   1      
  464   1        ADCCFG = 0;
  465   1        AUXR = 0;
  466   1        SCON = 0;
  467   1        S2CON = 0;
  468   1        S3CON = 0;
  469   1        S4CON = 0;
  470   1        P_SW1 = 0;
  471   1        IE2 = 0;
  472   1        TMOD = 0;
  473   1      //  MCLKOCR =1<<7| 10;
  474   1        uart_init(DEBUG_UART, DEBUG_UART_RX_PIN, DEBUG_UART_TX_PIN, DEBUG_UART_BAUD, DEBUG_UART_TIM);
  475   1        EnableGlobalIRQ();
  476   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1807     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        17     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         8     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
