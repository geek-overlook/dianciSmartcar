C251 COMPILER V5.60.0,  control                                                            15/07/24  23:30:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE control
OBJECT MODULE PLACED IN .\Out_File\control.obj
COMPILER INVOKED BY: D:\c51-keil\C251\BIN\C251.EXE Out_File\control.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE IN
                    -CDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\in
                    -c;..\USER\src;..\..\Libraries\seekfree_components;.\Out_File) DEBUG PRINT(.\Out_File\control.lst) TABS(2) OBJECT(.\Out_F
                    -ile\control.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          PID_TypDef mr_pid,ml_pid,R_pid,L_pid,Steer_pid,turn_pid,w_pid;  //左右电机PID
    4          PID_TypDef s_pid;
    5          
    6          void PID_init(PID_TypDef* sptr)
    7          {
    8   1          sptr->Kp = 0.0;             // 比例常数 Proportional Const
    9   1          sptr->Ki = 0.0;               // 积分常数 Integral Const
   10   1          sptr->Kd = 0.0;             // 微分常数 Derivative Const
   11   1          sptr->Kd2 = 0.0;
   12   1          sptr->Bias      = 0.0;    
   13   1          sptr->Integral  = 0.0;
   14   1          sptr->Last_Bias = 0.0;                
   15   1          sptr->Pre_Bias  = 0.0;
   16   1          
   17   1            
   18   1      }
   19          
   20          //PID设置
   21          void PID_Set(PID_TypDef *PID,float Kp,float Ki,float Kd)
   22          {
   23   1        PID->Kp = Kp;
   24   1        PID->Ki = Ki;
   25   1        PID->Kd = Kd;
   26   1      }
   27          
   28          void PID_turnSet(PID_TypDef *PID,float Kp,float Ki,float Kd,float Kd2)
   29          {
   30   1        PID->Kp = Kp;
   31   1        PID->Ki = Ki;
   32   1        PID->Kd = Kd;
   33   1        PID->Kd2 = Kd2;
   34   1      }
   35          
   36          //速度环(增量式PID)
   37          float IncPID(float Encoder,float Target,PID_TypDef* sptr) 
   38          {
   39   1        float Pwm;
   40   1        
   41   1        sptr->Bias = Target - Encoder;                                     // 计算当前误差
   42   1        Pwm = sptr->Kp * (sptr->Bias-sptr->Last_Bias)+sptr->Ki * sptr->Bias +sptr->Kd * (sptr->Bias-2*sptr->Las
             -t_Bias+sptr->Pre_Bias);  //P I D
   43   1      //  p=((sptr->Bias-sptr->Last_Bias));
   44   1        sptr->Pre_Bias=sptr->Last_Bias;                          // 存储误差，用于下次计算
   45   1        sptr->Last_Bias=sptr->Bias;   
   46   1        
   47   1      //  if(abs(Pwm)<=10)
   48   1      //  {
   49   1      //    Pwm=0;
   50   1      //  }
   51   1         
   52   1        return Pwm;                                    // 返回增量值
   53   1        
   54   1      }
   55          
C251 COMPILER V5.60.0,  control                                                            15/07/24  23:30:47  PAGE 2   

   56          
   57          //位置式PID
   58          float PstPID(float Angle, float Target,PID_TypDef* sptr)
   59          {
   60   1        float Pwm;
   61   1        
   62   1        sptr->Bias = Target -Angle ;
   63   1        sptr->Integral += sptr->Bias;
   64   1        
   65   1        Pwm = sptr->Kp   * sptr->Bias              // P
   66   1               +sptr->Ki * sptr->Integral                         // I
   67   1               +sptr->Kd * (sptr->Bias-sptr->Last_Bias);  // D
   68   1        
   69   1        sptr->Last_Bias=sptr->Bias;
   70   1        
   71   1        return(Pwm); 
   72   1        
   73   1      }
   74          
   75          //转向增量式PID
   76          float turn_PstPID(float turn_error,PID_TypDef* sptr)
   77          {
   78   1        float Pwm;
   79   1        sptr->Bias = turn_error;                                     // 计算当前误差
   80   1        
   81   1        Pwm = sptr->Kp * (sptr->Bias-sptr->Last_Bias)+sptr->Ki * sptr->Bias +sptr->Kd * sptr->Bias *fabs(sptr->B
             -ias)+sptr->Kd2*sptr->Bias *sptr->Bias *sptr->Bias ;  //P I D
   82   1        
   83   1      //  if(fabs(sptr->Bias) <= 1.5)
   84   1      //  Pwm = sptr->Kp * (sptr->Bias-sptr->Last_Bias)+sptr->Ki * sptr->Bias +sptr->Kd * sptr->Bias *fabs(sptr
             -->Bias) * 0.7 ;  //P I D
   85   1      //  else
   86   1      //  Pwm = sptr->Kp * (sptr->Bias-sptr->Last_Bias)+sptr->Ki * sptr->Bias +sptr->Kd * sptr->Bias *fabs(sptr-
             ->Bias) * 1.1;  
   87   1        
   88   1      //  p=((sptr->Bias-sptr->Last_Bias));
   89   1        sptr->Pre_Bias=sptr->Last_Bias;                          // 存储误差，用于下次计算
   90   1        sptr->Last_Bias=sptr->Bias;   
   91   1        
   92   1      
   93   1         
   94   1        return Pwm;                                    // 返回增量值
   95   1        
   96   1        
   97   1      }
   98          
   99          
  100          
  101          
  102          
  103          
  104          
  105          
  106          
  107          
  108          
  109          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1131     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
C251 COMPILER V5.60.0,  control                                                            15/07/24  23:30:47  PAGE 3   

  xdata-const size     =    ------     ------
  edata size           =       340     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
