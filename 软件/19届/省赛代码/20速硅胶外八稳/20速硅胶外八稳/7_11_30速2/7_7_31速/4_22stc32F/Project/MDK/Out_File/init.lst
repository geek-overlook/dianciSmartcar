C251 COMPILER V5.60.0,  init                                                               15/07/24  23:30:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE init
OBJECT MODULE PLACED IN .\Out_File\init.obj
COMPILER INVOKED BY: D:\c51-keil\C251\BIN\C251.EXE Out_File\init.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDI
                    -R(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;.
                    -.\USER\src;..\..\Libraries\seekfree_components;.\Out_File) DEBUG PRINT(.\Out_File\init.lst) TABS(2) OBJECT(.\Out_File\in
                    -it.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          //adc获取值
    4          float adc[11]={0} ;
    5          
    6          //陀螺仪变量
    7          int init_gyro_x = 0,init_gyro_y = 0,init_gyro_z = 0;
    8          float new_gyro_x = 0,new_gyro_y = 0,new_gyro_z = 0;
    9          float z_inc = 0,x_inc=0,y_inc=0;
   10          float angle_x;
   11          
   12          float last_acc_x,last_acc_y,last_acc_z;
   13          float last_gyro_x,last_gyro_y,last_gyro_z;
   14          
   15          float Xdata=0.0,Ydata=0.0,Zdata=0.0;
   16          float acc_x=0.0,acc_y=0.0,acc_z=0.0;
   17          float gyro_x=0.0,gyro_y=0.0,gyro_z=0.0;
   18          
   19          int text=0;//text零漂标志位
   20          float alpha = 0.3;
   21          
   22          char a=0;
   23          
   24          //电机pwm输出
   25          float r_pwm=0.0,l_pwm=0.0;
   26          float last_r_pwm=0.0,last_l_pwm=0.0;
   27          
   28          
   29          void car_pre_init(void)
   30          {
   31   1        
   32   1        //初始化PID
   33   1        PID_init(&mr_pid);      //角速度环
   34   1        PID_init(&ml_pid);
   35   1        PID_init(&R_pid);       //速度环
   36   1        PID_init(&L_pid);
   37   1        PID_init(&turn_pid);        //角速度环
   38   1      //  PID_init(&Steer_pid);
   39   1      
   40   1        PID_Set(&R_pid,200,25,17);        
   41   1        PID_Set(&L_pid,200,25,17);      //11速速度环pid60,18,20       14速度140,57  ，  //速度环
   42   1      //  PID_Set(&mr_pid,1,1,0);       
   43   1      //  PID_Set(&ml_pid,1,1,0);     //  //角度环
   44   1        
   45   1        PID_Set(&w_pid,0.7,0.1,0);        //角速度环  20 10
   46   1      //  PID_Set(&turn_pid,162,19,0);        //误差转向环    120，14
   47   1        PID_turnSet(&turn_pid,140,7,12,8);        //误差转向环   260,27,0
   48   1      
   49   1        
   50   1        //初始化ADC
   51   1        adc_init(ADC_P01, ADC_SYSclk_DIV_2);  //初始化ADC,P0.6通道 ，ADC时钟频率：SYSclk/2
   52   1        adc_init(ADC_P00, ADC_SYSclk_DIV_2);  //初始化ADC,P1.1通道 ，ADC时钟频率：SYSclk/2
   53   1        adc_init(ADC_P02, ADC_SYSclk_DIV_2);  //初始化ADC,P1.4通道 ，ADC时钟频率：SYSclk/2
   54   1        adc_init(ADC_P15, ADC_SYSclk_DIV_2);  //初始化ADC,P1.5通道 ，ADC时钟频率：SYSclk/2
   55   1        adc_init(ADC_P14, ADC_SYSclk_DIV_2);  //初始化ADC,P0.6通道 ，ADC时钟频率：SYSclk/2
   56   1        adc_init(ADC_P11, ADC_SYSclk_DIV_2);  //初始化ADC,P1.1通道 ，ADC时钟频率：SYSclk/2
C251 COMPILER V5.60.0,  init                                                               15/07/24  23:30:47  PAGE 2   

   57   1        adc_init(ADC_P05, ADC_SYSclk_DIV_2);  //初始化ADC,P1.4通道 ，ADC时钟频率：SYSclk/2
   58   1        adc_init(ADC_P06, ADC_SYSclk_DIV_2);  //初始化ADC,P1.5通道 ，ADC时钟频率：SYSclk/2
   59   1        delay_ms(10);
   60   1        
   61   1          //电机PWM输出
   62   1      //  pwm_init(MOTOR1_CH1,15000,0);   //左电机   7971
   63   1      //  pwm_init(MOTOR1_CH2,15000,0);   //左电机  
   64   1      //  pwm_init(MOTOR2_CH1,15000,0);   //左电机   7971
   65   1      //  pwm_init(MOTOR2_CH2,15000,0);   //左电机  
   66   1      //  delay_ms(10);
   67   1      
   68   1        pwm_init(MOTOR1, 15000, 0);
   69   1        pwm_init(MOTOR2, 15000, 0);
   70   1        delay_ms(10);
   71   1        
   72   1      //  //初始化串口
   73   1      //  uart_init(UART_2,UART_RX,UART_TX,BOTRATE,UART_TIM);//TIM_2,波特率为9600
   74   1        
   75   1        //初始化IPS屏幕
   76   1          ips114_init();  
   77   1          
   78   1        //编码器初始化
   79   1        ctimer_count_init(MOTOR1_ENCODER);
   80   1        ctimer_count_init(MOTOR2_ENCODER);
   81   1        delay_ms(30);
   82   1        
   83   1      //测距模块初始化  
   84   1      //  while(dl1b_init());
   85   1        //陀螺仪初始化
   86   1        //  TF Lidar1;
   87   1        Lidar1.Address = 0x10;
   88   1        User_I2C_Init();
   89   1        imu660ra_init();
   90   1        
   91   1        target_speed_save = l_target_speed;
   92   1        return;
   93   1      }
   94          
   95          
   96          void get_adc(void)  //ADC获取并处理
   97          {
   98   1        int adc_get_value[7] = {0}; 
   99   1        int i = 0 ,k = 0;
  100   1        for( i = 0;i < 5;++i)
  101   1        {
  102   2          adc_get_value[0] += adc_once(ADC0,ADC_10BIT);
  103   2          adc_get_value[1] += adc_once(ADC1,ADC_10BIT);
  104   2          adc_get_value[2] += adc_once(ADC2,ADC_10BIT);
  105   2          adc_get_value[3] += adc_once(ADC3,ADC_10BIT);
  106   2          adc_get_value[4] += adc_once(ADC4,ADC_10BIT);//5
  107   2          adc_get_value[5] += adc_once(ADC5,ADC_10BIT);//6
  108   2          adc_get_value[6] += adc_once(ADC6,ADC_10BIT);//7  
  109   2        }
  110   1        for( k = 0;k < 7;++k)
  111   1         {
  112   2           adc[k] = (float)adc_get_value[k] / (5*1000.0f);
  113   2         }
  114   1      }
  115          
  116          
  117          //--------------------------------归一化    
  118          
  119          ////float save_max_adc[7] = {0,0,0,0,0,0,0};
  120          ////float save_min_adc[7] = {10000.0,10000.0,10000.0,10000.0,10000.0,10000.0,10000.0}; 
  121          
  122          
C251 COMPILER V5.60.0,  init                                                               15/07/24  23:30:47  PAGE 3   

  123          //float save_max_adc[7] = {785, 568, 714, 582, 710, 569, 662};
  124          //float save_min_adc[7] = {8, 7, 23, 2, 9, 7, 25}; 
  125          ////float save_min_adc[7] = {0};
  126          //int target_adc = 0;
  127          
  128          //void get_adc(void)  //ADC获取并处理
  129          //{
  130          //  int adc_get_value[7] = {0}; 
  131          //  int i = 0 ,k = 0;
  132          //  for( i = 0;i < 5;++i)
  133          //  {
  134          //    adc_get_value[0] += adc_once(ADC0,ADC_10BIT);
  135          //    adc_get_value[1] += adc_once(ADC1,ADC_10BIT);
  136          //    adc_get_value[2] += adc_once(ADC2,ADC_10BIT);
  137          //    adc_get_value[3] += adc_once(ADC3,ADC_10BIT);
  138          //    adc_get_value[4] += adc_once(ADC4,ADC_10BIT);//5
  139          //    adc_get_value[5] += adc_once(ADC5,ADC_10BIT);//6
  140          //    adc_get_value[6] += adc_once(ADC6,ADC_10BIT);//7  
  141          //    
  142          //  }
  143          //  
  144          //  switch (target_adc){
  145          //      case 0:
  146          //          
  147          //          break;
  148          //      case 1:
  149          //          if (save_max_adc[0] < adc_once(ADC0,ADC_10BIT)){
  150          //              save_max_adc[0] = adc_once(ADC0,ADC_10BIT);
  151          //          }
  152          //          if(save_min_adc[0] > adc_once(ADC0,ADC_10BIT)){
  153          //              save_min_adc[0] = adc_once(ADC0,ADC_10BIT);
  154          //          }
  155          //          break;
  156          //      case 2:
  157          //          if (save_max_adc[1] < adc_once(ADC1,ADC_10BIT)){
  158          //              save_max_adc[1] = adc_once(ADC1,ADC_10BIT);
  159          //          }
  160          //          if(save_min_adc[1] > adc_once(ADC1,ADC_10BIT)){
  161          //              save_min_adc[1] = adc_once(ADC1,ADC_10BIT);
  162          //          }
  163          //          break;
  164          //      case 3:
  165          //          if (save_max_adc[2] < adc_once(ADC2,ADC_10BIT)){
  166          //              save_max_adc[2] = adc_once(ADC2,ADC_10BIT);
  167          //          }
  168          //          if(save_min_adc[2] > adc_once(ADC2,ADC_10BIT)){
  169          //              save_min_adc[2] = adc_once(ADC2,ADC_10BIT);
  170          //          }
  171          //          break;
  172          //      case 4:
  173          //          if (save_max_adc[3] < adc_once(ADC3,ADC_10BIT)){
  174          //              save_max_adc[3] = adc_once(ADC3,ADC_10BIT);
  175          //          }
  176          //          if(save_min_adc[3] > adc_once(ADC3,ADC_10BIT)){
  177          //              save_min_adc[3] = adc_once(ADC3,ADC_10BIT);
  178          //          }
  179          //          break;
  180          //      case 5:
  181          //          if (save_max_adc[4] < adc_once(ADC4,ADC_10BIT)){
  182          //              save_max_adc[4] = adc_once(ADC4,ADC_10BIT);
  183          //          }
  184          //          if(save_min_adc[4] > adc_once(ADC4,ADC_10BIT)){
  185          //              save_min_adc[4] = adc_once(ADC4,ADC_10BIT);
  186          //          }
  187          //          break;
  188          //      case 6:
C251 COMPILER V5.60.0,  init                                                               15/07/24  23:30:47  PAGE 4   

  189          //          if (save_max_adc[5] < adc_once(ADC5,ADC_10BIT)){
  190          //              save_max_adc[5] = adc_once(ADC5,ADC_10BIT);
  191          //          }
  192          //          if(save_min_adc[5] > adc_once(ADC5,ADC_10BIT)){
  193          //              save_min_adc[5] = adc_once(ADC5,ADC_10BIT);
  194          //          }
  195          //          break;
  196          //      case 7:
  197          //          if (save_max_adc[6] < adc_once(ADC6,ADC_10BIT)){
  198          //              save_max_adc[6] = adc_once(ADC6,ADC_10BIT);
  199          //          }
  200          //          if(save_min_adc[6] > adc_once(ADC6,ADC_10BIT)){
  201          //              save_min_adc[6] = adc_once(ADC6,ADC_10BIT);
  202          //          }
  203          //          break;
  204          //      }     
  205          //  
  206          //    
  207          //    for (k = 0; k < 7; k++){
  208          //        adc[k] = (float)( ((adc_get_value[k] / 5) - save_min_adc[k])  /
  209          //                          (save_max_adc[k] - save_min_adc[k]) 
  210          //                        );
  211          //    }
  212          //}
  213          
  214          
  215          
  216          //-------------------------------
  217          
  218          
  219          
  220          
  221          
  222          
  223          void gyroOffsetInit(void)     //去零漂
  224          {
  225   1          if(text==0)
  226   1          {
  227   2      
  228   2              if (a<100) 
  229   2             {
  230   3                  imu660ra_get_acc();
  231   3                  imu660ra_get_gyro();
  232   3                  Xdata+=imu660ra_gyro_x;
  233   3      //            Ydata+=imu660ra_gyro_y;
  234   3      //            Zdata+=imu660ra_gyro_z;
  235   3                  delay_ms(5);    // 最大 1Khz
  236   3                  a++;
  237   3      //            ips114_showint16(0,0,a);
  238   3      //            ips114_showint16(0,7,ips_page);
  239   3              }
  240   2              else if(a ==100)
  241   2              {
  242   3                Xdata *= 0.01;
  243   3      //          Ydata *= 0.01;
  244   3      //          Zdata *= 0.01;
  245   3      //          ips114_clear(WHITE);                  //清屏
  246   3                ips_page=1;
  247   3                a++;          
  248   3                text=1;
  249   3      //          oled_p8x16str(80,7,"   ");
  250   3      //          oled_int16(3,4,text);
  251   3              }
  252   2      
  253   2        }
  254   1          else if(text==1)
C251 COMPILER V5.60.0,  init                                                               15/07/24  23:30:47  PAGE 5   

  255   1          {
  256   2      //      imu660ra_get_gyro();
  257   2          imu660ra_get_acc();     //获取加速度数据
  258   2          imu660ra_get_gyro();      //获取陀螺仪数据
  259   2            gyro_x = imu660ra_gyro_transition(imu660ra_gyro_x - Xdata)* alpha+last_gyro_x*(1 - alpha); 
  260   2            last_gyro_x=gyro_x;
  261   2      
  262   2      //      duoji();
  263   2      //      motor();//电机使用
  264   2            
  265   2      //      imu660ra_get_acc();
  266   2            
  267   2      //      acc_x = (imu660ra_acc_transition(imu660ra_acc_x) * alpha)  + last_acc_x * (1 - alpha);
  268   2      //      acc_y = (imu660ra_acc_transition(imu660ra_acc_y) * alpha)  + last_acc_y * (1 - alpha);
  269   2      //      acc_z = (imu660ra_acc_transition(imu660ra_acc_z) * alpha)  + last_acc_z * (1 - alpha);
  270   2      ////      acc_x=(float)imu660ra_acc_x*0.7+last_acc_x*0.3;
  271   2      ////      acc_y=(float)imu660ra_acc_y*0.7+last_acc_y*0.3;
  272   2      ////      acc_z=(float)imu660ra_acc_z*0.7+last_acc_z*0.3;
  273   2      //      last_acc_x=acc_x;
  274   2      //      last_acc_y=acc_y;
  275   2      //      last_acc_z=acc_z;
  276   2      //      
  277   2      
  278   2      //      //! 陀螺仪角速度必须转换为弧度制角速度: deg/s -> rad/s
  279   2      
  280   2      //      gyro_x = (imu660ra_gyro_transition(imu660ra_gyro_x )-imu660ra_gyro_transition(Xdata ) )* alpha+last_
             -gyro_x* (1 - alpha);
  281   2      //      gyro_y = (imu660ra_gyro_transition(imu660ra_gyro_y )-imu660ra_gyro_transition(Ydata ) )* alpha+last_
             -gyro_y* (1 - alpha);
  282   2            
  283   2      //      gyro_z = ((float)(imu660ra_gyro_z-Zdata) /65.6 )* (float)alpha+last_gyro_z* (1 - alpha);
  284   2      //      
  285   2      //      gyro_z = imu660ra_gyro_transition(imu660ra_gyro_z-Zdata ) * alpha+last_gyro_z* (1 - alpha);
  286   2      
  287   2      //      last_gyro_z=gyro_z;
  288   2      //      last_gyro_y=gyro_y;
  289   2      
  290   2            
  291   2          }
  292   1          
  293   1      }
  294          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       873     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       179     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       251     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
