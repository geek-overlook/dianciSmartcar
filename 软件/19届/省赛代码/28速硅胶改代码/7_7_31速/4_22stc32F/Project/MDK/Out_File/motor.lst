C251 COMPILER V5.60.0,  motor                                                              19/12/24  21:08:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE motor
OBJECT MODULE PLACED IN .\Out_File\motor.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Out_File\motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDI
                    -R(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;.
                    -.\USER\src;..\..\Libraries\seekfree_components;.\Out_File) DEBUG PRINT(.\Out_File\motor.lst) TABS(2) OBJECT(.\Out_File\m
                    -otor.obj) 

stmt  level    source

    1          #include "headfile.h" // 包含头文件，确保所有必要的函数和定义可用
    2          
    3          // 编码器和目标速度的初始化
    4          int r_encoder = 0; // 右电机编码器值
    5          int l_encoder = 0; // 左电机编码器值
    6          float r_target_speed = 28.0; // 右电机目标速度
    7          float l_target_speed = 28.0; // 左电机目标速度
    8          
    9          // 速度和误差变量
   10          float r_speed = 0.0, l_speed = 0.0; // 右电机和左电机的实际速度
   11          float r_endspeed = 0; // 右电机期望速度
   12          float l_endspeed = 0; // 左电机期望速度
   13          float l_error = 0; // 左电机误差
   14          float r_error = 0; // 右电机误差
   15          
   16          char turn_count = 0; // 转向计数器
   17          
   18          // 上一个输入值
   19          float last_in_L = 0; // 左电机上一个输入
   20          float last_in_R = 0; // 右电机上一个输入
   21          float T = 0.005; // 时间间隔
   22          
   23          float last_in_turn = 0; // 上一个转向输入
   24          
   25          // 常量定义
   26          #define ENCODER_RESOLUTION 1024.0f // 编码器分辨率
   27          #define SPEED_SCALING_FACTOR 200.0f // 速度缩放因子
   28          
   29          void motor(void) // 电机控制函数
   30          {
   31   1        // 读取编码器值
   32   1        l_encoder = ctimer_count_read(MOTOR1_ENCODER); // 读取左电机编码器
   33   1        r_encoder = ctimer_count_read(MOTOR2_ENCODER); // 读取右电机编码器
   34   1        
   35   1        // 清除计时器计数
   36   1        ctimer_count_clean(CTIM0_P34);
   37   1        ctimer_count_clean(CTIM3_P04);
   38   1        
   39   1        // 计算电机速度
   40   1        l_speed = calculate_motor_speed(l_encoder, MOTOR1_DIR); // 计算左电机速度
*** WARNING C140 IN LINE 40 OF Out_File\motor.c: 'calculate_motor_speed' undefined; assuming 'extern int calculate_motor
             -_speed()'
*** WARNING C95 IN LINE 40 OF Out_File\motor.c: 'calculate_motor_speed': too many actual parameters
   41   1        r_speed = calculate_motor_speed(r_encoder, MOTOR2_DIR); // 计算右电机速度
*** WARNING C95 IN LINE 41 OF Out_File\motor.c: 'calculate_motor_speed': too many actual parameters
   42   1        
   43   1        motor_inc += (fabs(r_speed) + fabs(l_speed)) * 0.5f; // 更新电机增量
   44   1      
   45   1        // 控制转向
   46   1        if (turn_count < 5)
   47   1        {
   48   2          turn_count++; // 增加转向计数
   49   2        }
   50   1        else if (turn_count >= 5)
   51   1        {
   52   2          turn_speed = forwardfeed_turn(turn_PstPID(error, &turn_pid)); // 计算转向速度
C251 COMPILER V5.60.0,  motor                                                              19/12/24  21:08:58  PAGE 2   

   53   2          turn_count = 0; // 重置转向计数
   54   2        }
   55   1        
   56   1        // 根据距离保护和速度控制电机
   57   1        if (distance_protect)
   58   1        {
   59   2          update_motor_speed(); // 更新电机速度
*** WARNING C140 IN LINE 59 OF Out_File\motor.c: 'update_motor_speed' undefined; assuming 'extern int update_motor_speed
             -()'
   60   2        }
   61   1      
   62   1        // 限制 PWM 值范围
   63   1        r_pwm = constrain_pwm(r_pwm);
*** WARNING C140 IN LINE 63 OF Out_File\motor.c: 'constrain_pwm' undefined; assuming 'extern int constrain_pwm()'
*** WARNING C95 IN LINE 63 OF Out_File\motor.c: 'constrain_pwm': too many actual parameters
   64   1        l_pwm = constrain_pwm(l_pwm);
*** WARNING C95 IN LINE 64 OF Out_File\motor.c: 'constrain_pwm': too many actual parameters
   65   1      
   66   1        // 根据 PWM 值控制电机
   67   1        control_motor(MOTOR2, r_pwm, P2_4); // 控制右电机
*** WARNING C140 IN LINE 67 OF Out_File\motor.c: 'control_motor' undefined; assuming 'extern int control_motor()'
*** WARNING C95 IN LINE 67 OF Out_File\motor.c: 'control_motor': too many actual parameters
   68   1        control_motor(MOTOR1, l_pwm, P2_6); // 控制左电机
*** WARNING C95 IN LINE 68 OF Out_File\motor.c: 'control_motor': too many actual parameters
   69   1      }
   70          
   71          // 计算电机速度的函数
   72          float calculate_motor_speed(int encoder_value, int motor_direction)
   73          {
*** ERROR C53 IN LINE 73 OF Out_File\motor.c: redefinition of 'calculate_motor_speed': different return types
   74   1        float speed = (float)encoder_value / ENCODER_RESOLUTION * SPEED_SCALING_FACTOR; // 计算速度
   75   1        return (motor_direction == 0) ? speed : -speed; // 根据方向返回速度
   76   1      }
   77          
   78          // 限制 PWM 值范围的函数
   79          float constrain_pwm(float pwm_value)
   80          {
*** ERROR C53 IN LINE 80 OF Out_File\motor.c: redefinition of 'constrain_pwm': different return types
   81   1        if (pwm_value >= 8000) return 8000;
   82   1        if (pwm_value < -8000) return -8000;
   83   1        return pwm_value;
   84   1      }
   85          
   86          // 控制电机的函数
   87          void control_motor(int motor, float pwm_value, int gpio_pin)
   88          {
*** ERROR C53 IN LINE 88 OF Out_File\motor.c: redefinition of 'control_motor': different return types
   89   1        if (pwm_value >= 0)
   90   1        {
   91   2          gpio_mode(gpio_pin, GPO_PP); // 设置 GPIO 模式
   92   2          pwm_duty(motor, pwm_value); // 设置电机 PWM
   93   2        }
   94   1        else
   95   1        {
   96   2          gpio_mode(gpio_pin, GPO_PP); // 设置 GPIO 模式
   97   2          pwm_duty(motor, -pwm_value); // 设置电机 PWM
   98   2        }
   99   1      }
  100          
  101          // 更新电机速度的函数
  102          void update_motor_speed()
  103          {
*** ERROR C53 IN LINE 103 OF Out_File\motor.c: redefinition of 'update_motor_speed': different return types
  104   1        // 根据距离保护和速度控制电机的逻辑
  105   1        // 这里可以添加具体的速度更新逻辑
  106   1      }
C251 COMPILER V5.60.0,  motor                                                              19/12/24  21:08:58  PAGE 3   

  107          
  108          
  109          
  110          

C251 COMPILATION COMPLETE.  10 WARNING(S),  4 ERROR(S)
